# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, dev, enhancement/remove-unneeded-accounts ]
  pull_request:
    branches: [ main, dev, enhancement/remove-unneeded-accounts ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  solana_verion: 1.8.11
  anchor_version: 0.19.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Node 14
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: "yarn"
          
      # Cache Cargo registry + index 
      - uses: actions/cache@v2
        name: Cache Cargo registry + index
        id: cache-anchor
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-${{ runner.os }}-v0000-${{ hashFiles('**/Cargo.lock') }}
          
      # Add Solana to PATH
      - name: Add Solana to PATH
        run: echo "/home/runner/.local/share/solana/install/active_release/bin:$PATH" >> $GITHUB_PATH
        
      # Cache Solana Tool Suite
      - uses: actions/cache@v2
        name: Cache Solana Tool Suite
        id: cache-solana
        with:
          path: |
            ~/.cache/solana/
            ~/.local/share/solana/
          key: solana-${{ runner.os }}-v0000-${{ env.solana_verion }}

      # Cache Target Folder
      - uses: actions/cache@v2
        name: Cache target folder
        id: cache-programs
        with:
          path: |
            ./target
          key: solana-${{ runner.os }}-v0000-${{ hashFiles('**/programs/**/*.rs') }}-${{ hashFiles('**/programs/**/*.toml') }}

      # Rust toolchain
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      # Install Solana
      - name: install solana
        if: steps.cache-solana.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.solana_verion }}/install)"

      # Setup Solana
      - name: setup solana
        run: |
          solana --version
          solana-keygen new
          
      # Checkout MangoClient-v3, install dependencies, and run MM bot devnet SOL perp + Keeper
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          repository: blockworks-foundation/mango-client-v3
          path: /home/runner/work/uxd-program/third-party/mango-client-v3
      - name: Install MangoClient-v3 dependencies then runs Mango Keeper and MM bot on devnet for SOL perp
        run: |
          cd /home/runner/work/uxd-program/third-party/mango-client-v3
          yarn install
          solana airdrop 1 -u d
          solana airdrop 1 -u d
          GROUP=devnet.2 CLUSTER=devnet KEYPAIR=$(cat /home/runner/.config/solana/id.json) yarn keeper &
          GROUP=devnet.2 CLUSTER=devnet KEYPAIR=$(cat /home/runner/.config/solana/id.json) MANGO_ACCOUNT_PUBKEY=8fbL4156uoVYYyY9cvA6hVBBTdui9356tdKmFbkC6t6w MARKET=SOL yarn mm &
          cd -
      
      # Install UXD dependencies
      - run: yarn install
      # Run Anchor test
      - run: npx @project-serum/anchor-cli@${{ env.anchor_version }} test

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
