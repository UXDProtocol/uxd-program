name: Anchor Test

on:
  push:
    branches: main
  pull_request:
    branches: [main, v*.*]
  workflow_dispatch:
  
permissions:
  contents: read
  pull-requests: write
  
env:
  CARGO_TERM_COLOR: always
  SOLANA_VERSION: 1.8.12
  ANCHOR_VERSION: 0.20.1
  CLUSTER: "devnet"
  RUNNER_WALLET_PATH: "/home/runner/.config/solana/id.json"
  MM_WALLET_PATH: "/home/runner/.config/solana/mm_id.json"
  BANK_WALLET_PATH: "./scripts/bank-keypair.json"
  MANGO_ACCOUNT_MM_SOL: "8fbL4156uoVYYyY9cvA6hVBBTdui9356tdKmFbkC6t6w"
  MANGO_ACCOUNT_MM_BTC: "4Tw2AjjEXSWvFC9CCm88yhswRGgJokxiQnJDtVnVctTc"
  MANGO_ACCOUNT_MM_ETH: "Bnutxi4RpfduHSuQ2ZtDAEb4GegU3X1gmWZhQpe1YMts"
  NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
  DEVNET_FAUCET: "9B5XszUGdMaxCZ7uSQhPzdks5ZQSmWxrmzCSvtJ6Ns6g"
  RUNNER_FUNDING_AMOUNT: 15
  MM_FUNDING_AMOUNT: 1
  TRANSACTION_FEE_OFFSET: 0.005
    
jobs:

  market-maker-bots:
    name: Run Market Maker Bots
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Install solana
      - name: Cache Solana Tool Suite
        uses: actions/cache@v2  
        id: cache-solana
        with:
          path: |
            ~/.cache/solana/
            ~/.local/share/solana/
          key: solana-${{ runner.os }}-v0000-${{ env.SOLANA_VERSION }}
      - name: install solana
        if: steps.cache-solana.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
      - name: Add Solana to PATH
        run: echo "/home/runner/.local/share/solana/install/active_release/bin:$PATH" >> $GITHUB_PATH
      - name: Setup solana 
        run: |
          solana --version
          solana config set -u d
      # Install Yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Yarn Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Node 14 installation
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: "yarn"
          registry-url: 'https://npm.pkg.github.com'
          scope: "@UXDProtocol"
          always-auth: true
      # Create Keypair
      - name: Create MM keypair and funds it
        run: |
          solana-keygen new -o ${{ env.MM_WALLET_PATH }}
          solana transfer --keypair ${{ env.BANK_WALLET_PATH }} $(solana-keygen pubkey ${{ env.MM_WALLET_PATH }}) ${{ env.MM_FUNDING_AMOUNT }} --allow-unfunded-recipient
          solana balance
      # Checkout Mango Client
      - name: Checkout MangoClient-v3
        uses: actions/checkout@v2
        with:
          repository: blockworks-foundation/mango-client-v3
          path: /home/runner/work/uxd-program/uxd-program/third-party-dependencies/mango-client-v3
      - name: Install MangoClient-v3 dependencies then runs Mango Keeper and MM bot on devnet for SOL perp
        run: |
          cd /home/runner/work/uxd-program/uxd-program/third-party-dependencies/mango-client-v3
          yarn install
          GROUP=devnet.2 CLUSTER=${{ env.CLUSTER }} KEYPAIR=${{ env.MM_WALLET_PATH }} yarn keeper &
          GROUP=devnet.2 CLUSTER=${{ env.CLUSTER }} KEYPAIR=${{ env.MM_WALLET_PATH }} MANGO_ACCOUNT_PUBKEY=${{ env.MANGO_ACCOUNT_MM_SOL }} MARKET=SOL yarn mm &
          GROUP=devnet.2 CLUSTER=${{ env.CLUSTER }} KEYPAIR=${{ env.MM_WALLET_PATH }} MANGO_ACCOUNT_PUBKEY=${{ env.MANGO_ACCOUNT_MM_BTC }} MARKET=BTC yarn mm &
          GROUP=devnet.2 CLUSTER=${{ env.CLUSTER }} KEYPAIR=${{ env.MM_WALLET_PATH }} MANGO_ACCOUNT_PUBKEY=${{ env.MANGO_ACCOUNT_MM_ETH }} MARKET=ETH yarn mm &

  anchor-test:
    name: Anchor Test
    runs-on: ubuntu-latest
    needs: [market-maker-bots]
    steps:
      # Checkout
      - uses: actions/checkout@v2
      # Install Rust
      - name: Rust toolchain installation
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal
      # Install solana
      - name: Cache Solana Tool Suite
        uses: actions/cache@v2  
        id: cache-solana
        with:
          path: |
            ~/.cache/solana/
            ~/.local/share/solana/
          key: solana-${{ runner.os }}-v0000-${{ env.SOLANA_VERSION }}
      - name: install solana
        if: steps.cache-solana.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
      - name: Add Solana to PATH
        run: echo "/home/runner/.local/share/solana/install/active_release/bin:$PATH" >> $GITHUB_PATH
      - name: Setup solana 
        run: |
          solana --version
          solana config set -u d
      # Install Yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Yarn Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Node 14 installation
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: "yarn"
          registry-url: 'https://npm.pkg.github.com'
          scope: "@UXDProtocol"
          always-auth: true
      # Create Keypair
      - name: Create Runner keypair and funds it
        run: |
          solana-keygen new -o ${{ env.RUNNER_WALLET_PATH }}
          solana transfer --keypair ${{ env.BANK_WALLET_PATH }} $(solana-keygen pubkey ${{ env.RUNNER_WALLET_PATH }}) ${{ env.RUNNER_FUNDING_AMOUNT }} --allow-unfunded-recipient
          solana balance
      # Cargo caching
      - name: Cache Cargo registry + index
        uses: actions/cache@v2  
        id: cache-anchor
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-${{ runner.os }}-v0000-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target folder
        uses: actions/cache@v2
        id: cache-programs
        with:
          path: |
            ./target/debug
            ./target/release
            ./target/bpfel-unknown-unknown
          key: solana-${{ runner.os }}-v0000-${{ hashFiles('**/programs/**/*.rs') }}-${{ hashFiles('**/programs/**/*.toml') }}

      - name: Create NPMRC
        run: |
          echo "@uxdprotocol:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ env.NODE_AUTH_TOKEN }}" >> ~/.npmrc

      - name: Yarn install + run tests
        run: |
          yarn install
          ./scripts/reset_program_id.sh
          npx @project-serum/anchor-cli@${{ env.ANCHOR_VERSION }} test --skip-local-validator

      - name: Close deployed program
        run: solana program close $(solana-keygen pubkey ./target/deploy/uxd-keypair.json) --recipient ${{ env.BANK_WALLET_PATH }}
      - name: Returning funded tests accounts SOLs to the bank
        run: |
          solana transfer --keypair MM_WALLET_PATH ${{ env.BANK_WALLET_PATH }} $(echo $(solana balance --keypair MM_WALLET_PATH | awk '{print $1}') - ${{ env.TRANSACTION_FEE_OFFSET }} | bc)
          solana transfer --keypair RUNNER_WALLET_PATH ${{ env.BANK_WALLET_PATH }} $(echo $(solana balance --keypair RUNNER_WALLET_PATH | awk '{print $1}') - ${{ env.TRANSACTION_FEE_OFFSET }} | bc)